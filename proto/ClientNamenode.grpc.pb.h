// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ClientNamenode.proto
#ifndef GRPC_ClientNamenode_2eproto__INCLUDED
#define GRPC_ClientNamenode_2eproto__INCLUDED

#include "ClientNamenode.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

// 定义RPC接口
class ClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "ClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 文件操作接口
    virtual ::grpc::Status GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::GetBlockLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>> AsyncGetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>>(AsyncGetBlockLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>> PrepareAsyncGetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>>(PrepareAsyncGetBlockLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::GetServerDefaultsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>> AsyncGetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>>(AsyncGetServerDefaultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>> PrepareAsyncGetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>>(PrepareAsyncGetServerDefaultsRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::CreateRequest& request, ::CreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Append(::grpc::ClientContext* context, const ::AppendRequest& request, ::AppendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>> AsyncAppend(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>>(AsyncAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>> PrepareAsyncAppend(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>>(PrepareAsyncAppendRaw(context, request, cq));
    }
    virtual ::grpc::Status Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>> AsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>> PrepareAsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>> AsyncSetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    virtual ::grpc::Status SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>> AsyncSetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>>(AsyncSetOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>> PrepareAsyncSetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>>(PrepareAsyncSetOwnerRaw(context, request, cq));
    }
    virtual ::grpc::Status mkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::mkdirResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>> Asyncmkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>>(AsyncmkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>> PrepareAsyncmkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>>(PrepareAsyncmkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status Listing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::GetListingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>> AsyncListing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>>(AsyncListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>> PrepareAsyncListing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>>(PrepareAsyncListingRaw(context, request, cq));
    }
    virtual ::grpc::Status RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::RenameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>> AsyncRenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>>(AsyncRenewLeaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>> PrepareAsyncRenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>>(PrepareAsyncRenewLeaseRaw(context, request, cq));
    }
    // dfs管理接口
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 文件操作接口
      virtual void GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // dfs管理接口
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>* AsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetBlockLocationResponse>* PrepareAsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>* AsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetServerDefaultsResponse>* PrepareAsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>* AsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendResponse>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>* AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>* AsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SetOwnerResponse>* PrepareAsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>* AsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mkdirResponse>* PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>* AsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetListingResponse>* PrepareAsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>* AsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RenameResponse>* PrepareAsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::GetBlockLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>> AsyncGetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>>(AsyncGetBlockLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>> PrepareAsyncGetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>>(PrepareAsyncGetBlockLocationRaw(context, request, cq));
    }
    ::grpc::Status GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::GetServerDefaultsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>> AsyncGetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>>(AsyncGetServerDefaultsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>> PrepareAsyncGetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>>(PrepareAsyncGetServerDefaultsRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::CreateRequest& request, ::CreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Append(::grpc::ClientContext* context, const ::AppendRequest& request, ::AppendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendResponse>> AsyncAppend(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendResponse>>(AsyncAppendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendResponse>> PrepareAsyncAppend(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendResponse>>(PrepareAsyncAppendRaw(context, request, cq));
    }
    ::grpc::Status Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>> AsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>>(AsyncRenameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>> PrepareAsyncRename(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>>(PrepareAsyncRenameRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>> AsyncSetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>>(AsyncSetPermissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>> PrepareAsyncSetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>>(PrepareAsyncSetPermissionRaw(context, request, cq));
    }
    ::grpc::Status SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>> AsyncSetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>>(AsyncSetOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>> PrepareAsyncSetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>>(PrepareAsyncSetOwnerRaw(context, request, cq));
    }
    ::grpc::Status mkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::mkdirResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mkdirResponse>> Asyncmkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mkdirResponse>>(AsyncmkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mkdirResponse>> PrepareAsyncmkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mkdirResponse>>(PrepareAsyncmkdirRaw(context, request, cq));
    }
    ::grpc::Status Listing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::GetListingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetListingResponse>> AsyncListing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetListingResponse>>(AsyncListingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetListingResponse>> PrepareAsyncListing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetListingResponse>>(PrepareAsyncListingRaw(context, request, cq));
    }
    ::grpc::Status RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::RenameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>> AsyncRenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>>(AsyncRenewLeaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>> PrepareAsyncRenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RenameResponse>>(PrepareAsyncRenewLeaseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, std::function<void(::grpc::Status)>) override;
      void Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)>) override;
      void Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)>) override;
      void SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, std::function<void(::grpc::Status)>) override;
      void mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, std::function<void(::grpc::Status)>) override;
      void Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)>) override;
      void RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>* AsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>* PrepareAsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>* AsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>* PrepareAsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendResponse>* AsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendResponse>* PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameResponse>* AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameResponse>* PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* AsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* PrepareAsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mkdirResponse>* AsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mkdirResponse>* PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetListingResponse>* AsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetListingResponse>* PrepareAsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameResponse>* AsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RenameResponse>* PrepareAsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerDefaults_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Append_;
    const ::grpc::internal::RpcMethod rpcmethod_Rename_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPermission_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_Listing_;
    const ::grpc::internal::RpcMethod rpcmethod_RenewLease_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 文件操作接口
    virtual ::grpc::Status GetBlockLocation(::grpc::ServerContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response);
    virtual ::grpc::Status GetServerDefaults(::grpc::ServerContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::CreateRequest* request, ::CreateResponse* response);
    virtual ::grpc::Status Append(::grpc::ServerContext* context, const ::AppendRequest* request, ::AppendResponse* response);
    virtual ::grpc::Status Rename(::grpc::ServerContext* context, const ::RenameRequest* request, ::RenameResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::DeleteRequest* request, ::DeleteResponse* response);
    virtual ::grpc::Status SetPermission(::grpc::ServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response);
    virtual ::grpc::Status SetOwner(::grpc::ServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response);
    virtual ::grpc::Status mkdir(::grpc::ServerContext* context, const ::mkdirRequest* request, ::mkdirResponse* response);
    virtual ::grpc::Status Listing(::grpc::ServerContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response);
    virtual ::grpc::Status RenewLease(::grpc::ServerContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response);
    // dfs管理接口
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockLocation(::grpc::ServerContext* context, ::GetBlockLocationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetBlockLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerDefaults(::grpc::ServerContext* context, ::GetServerDefaultsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetServerDefaultsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Append() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::AppendRequest* request, ::grpc::ServerAsyncResponseWriter< ::AppendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rename() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::RenameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPermission() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::SetOwnerRequest* request, ::grpc::ServerAsyncResponseWriter< ::SetOwnerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetOwner() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOwner(::grpc::ServerContext* context, ::SetOwnerRequest* request, ::grpc::ServerAsyncResponseWriter< ::SetOwnerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_mkdir() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmkdir(::grpc::ServerContext* context, ::mkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::mkdirResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Listing() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListing(::grpc::ServerContext* context, ::GetListingrRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetListingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenewLease() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewLease(::grpc::ServerContext* context, ::RenewLeaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::RenameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBlockLocation<WithAsyncMethod_GetServerDefaults<WithAsyncMethod_Create<WithAsyncMethod_Append<WithAsyncMethod_Rename<WithAsyncMethod_Delete<WithAsyncMethod_SetPermission<WithAsyncMethod_SetOwner<WithAsyncMethod_mkdir<WithAsyncMethod_Listing<WithAsyncMethod_RenewLease<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::GetBlockLocationsRequest, ::GetBlockLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response) { return this->GetBlockLocation(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockLocation(
        ::grpc::MessageAllocator< ::GetBlockLocationsRequest, ::GetBlockLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetBlockLocationsRequest, ::GetBlockLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetServerDefaultsRequest, ::GetServerDefaultsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response) { return this->GetServerDefaults(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerDefaults(
        ::grpc::MessageAllocator< ::GetServerDefaultsRequest, ::GetServerDefaultsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetServerDefaultsRequest, ::GetServerDefaultsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerDefaults(
      ::grpc::CallbackServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CreateRequest, ::CreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CreateRequest* request, ::CreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::CreateRequest, ::CreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreateRequest, ::CreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Append() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::AppendRequest, ::AppendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AppendRequest* request, ::AppendResponse* response) { return this->Append(context, request, response); }));}
    void SetMessageAllocatorFor_Append(
        ::grpc::MessageAllocator< ::AppendRequest, ::AppendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AppendRequest, ::AppendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Append(
      ::grpc::CallbackServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::RenameRequest, ::RenameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RenameRequest* request, ::RenameResponse* response) { return this->Rename(context, request, response); }));}
    void SetMessageAllocatorFor_Rename(
        ::grpc::MessageAllocator< ::RenameRequest, ::RenameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RenameRequest, ::RenameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::DeleteRequest, ::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::DeleteRequest* request, ::DeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::DeleteRequest, ::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::DeleteRequest, ::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPermission() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::SetOwnerRequest, ::SetOwnerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response) { return this->SetPermission(context, request, response); }));}
    void SetMessageAllocatorFor_SetPermission(
        ::grpc::MessageAllocator< ::SetOwnerRequest, ::SetOwnerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SetOwnerRequest, ::SetOwnerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetOwner() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::SetOwnerRequest, ::SetOwnerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response) { return this->SetOwner(context, request, response); }));}
    void SetMessageAllocatorFor_SetOwner(
        ::grpc::MessageAllocator< ::SetOwnerRequest, ::SetOwnerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SetOwnerRequest, ::SetOwnerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_mkdir() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::mkdirRequest, ::mkdirResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mkdirRequest* request, ::mkdirResponse* response) { return this->mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_mkdir(
        ::grpc::MessageAllocator< ::mkdirRequest, ::mkdirResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mkdirRequest, ::mkdirResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Listing() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::GetListingrRequest, ::GetListingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response) { return this->Listing(context, request, response); }));}
    void SetMessageAllocatorFor_Listing(
        ::grpc::MessageAllocator< ::GetListingrRequest, ::GetListingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetListingrRequest, ::GetListingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Listing(
      ::grpc::CallbackServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RenewLease() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::RenewLeaseRequest, ::RenameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response) { return this->RenewLease(context, request, response); }));}
    void SetMessageAllocatorFor_RenewLease(
        ::grpc::MessageAllocator< ::RenewLeaseRequest, ::RenameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RenewLeaseRequest, ::RenameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenewLease(
      ::grpc::CallbackServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetBlockLocation<WithCallbackMethod_GetServerDefaults<WithCallbackMethod_Create<WithCallbackMethod_Append<WithCallbackMethod_Rename<WithCallbackMethod_Delete<WithCallbackMethod_SetPermission<WithCallbackMethod_SetOwner<WithCallbackMethod_mkdir<WithCallbackMethod_Listing<WithCallbackMethod_RenewLease<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Append() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rename() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPermission() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetOwner() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_mkdir() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Listing() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenewLease() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerDefaults(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Append() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rename() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPermission() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPermission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetOwner() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_mkdir() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Listing() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenewLease() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewLease(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerDefaults(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerDefaults(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Append() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Append(context, request, response); }));
    }
    ~WithRawCallbackMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Append(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rename() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rename(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rename(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPermission() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPermission(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPermission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetOwner() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetOwner(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_mkdir() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Listing() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Listing(context, request, response); }));
    }
    ~WithRawCallbackMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Listing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RenewLease() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenewLease(context, request, response); }));
    }
    ~WithRawCallbackMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenewLease(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockLocation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetBlockLocationsRequest, ::GetBlockLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetBlockLocationsRequest, ::GetBlockLocationResponse>* streamer) {
                       return this->StreamedGetBlockLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockLocation(::grpc::ServerContext* /*context*/, const ::GetBlockLocationsRequest* /*request*/, ::GetBlockLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetBlockLocationsRequest,::GetBlockLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerDefaults : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerDefaults() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetServerDefaultsRequest, ::GetServerDefaultsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetServerDefaultsRequest, ::GetServerDefaultsResponse>* streamer) {
                       return this->StreamedGetServerDefaults(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerDefaults() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerDefaults(::grpc::ServerContext* /*context*/, const ::GetServerDefaultsRequest* /*request*/, ::GetServerDefaultsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerDefaults(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetServerDefaultsRequest,::GetServerDefaultsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreateRequest, ::CreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreateRequest, ::CreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::CreateRequest* /*request*/, ::CreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateRequest,::CreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Append : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Append() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AppendRequest, ::AppendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AppendRequest, ::AppendResponse>* streamer) {
                       return this->StreamedAppend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Append() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Append(::grpc::ServerContext* /*context*/, const ::AppendRequest* /*request*/, ::AppendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppendRequest,::AppendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rename() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RenameRequest, ::RenameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RenameRequest, ::RenameResponse>* streamer) {
                       return this->StreamedRename(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rename(::grpc::ServerContext* /*context*/, const ::RenameRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RenameRequest,::RenameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::DeleteRequest, ::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::DeleteRequest, ::DeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::DeleteRequest* /*request*/, ::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DeleteRequest,::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPermission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPermission() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SetOwnerRequest, ::SetOwnerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SetOwnerRequest, ::SetOwnerResponse>* streamer) {
                       return this->StreamedSetPermission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPermission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPermission(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPermission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetOwnerRequest,::SetOwnerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetOwner() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SetOwnerRequest, ::SetOwnerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SetOwnerRequest, ::SetOwnerResponse>* streamer) {
                       return this->StreamedSetOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOwner(::grpc::ServerContext* /*context*/, const ::SetOwnerRequest* /*request*/, ::SetOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SetOwnerRequest,::SetOwnerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_mkdir() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mkdirRequest, ::mkdirResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mkdirRequest, ::mkdirResponse>* streamer) {
                       return this->Streamedmkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* /*context*/, const ::mkdirRequest* /*request*/, ::mkdirResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mkdirRequest,::mkdirResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Listing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Listing() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetListingrRequest, ::GetListingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetListingrRequest, ::GetListingResponse>* streamer) {
                       return this->StreamedListing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Listing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Listing(::grpc::ServerContext* /*context*/, const ::GetListingrRequest* /*request*/, ::GetListingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetListingrRequest,::GetListingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenewLease : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenewLease() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RenewLeaseRequest, ::RenameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RenewLeaseRequest, ::RenameResponse>* streamer) {
                       return this->StreamedRenewLease(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenewLease() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenewLease(::grpc::ServerContext* /*context*/, const ::RenewLeaseRequest* /*request*/, ::RenameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenewLease(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RenewLeaseRequest,::RenameResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBlockLocation<WithStreamedUnaryMethod_GetServerDefaults<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Append<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_SetOwner<WithStreamedUnaryMethod_mkdir<WithStreamedUnaryMethod_Listing<WithStreamedUnaryMethod_RenewLease<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBlockLocation<WithStreamedUnaryMethod_GetServerDefaults<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Append<WithStreamedUnaryMethod_Rename<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_SetPermission<WithStreamedUnaryMethod_SetOwner<WithStreamedUnaryMethod_mkdir<WithStreamedUnaryMethod_Listing<WithStreamedUnaryMethod_RenewLease<Service > > > > > > > > > > > StreamedService;
};


#endif  // GRPC_ClientNamenode_2eproto__INCLUDED
