// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenode.proto

#include "ClientNamenode.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
PROTOBUF_CONSTEXPR GetBlockLocationsRequest::GetBlockLocationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.offset_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.length_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockLocationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockLocationsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockLocationsRequestDefaultTypeInternal() {}
  union {
    GetBlockLocationsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockLocationsRequestDefaultTypeInternal _GetBlockLocationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBlockLocationResponse::GetBlockLocationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockLocationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockLocationResponseDefaultTypeInternal() {}
  union {
    GetBlockLocationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockLocationResponseDefaultTypeInternal _GetBlockLocationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetServerDefaultsRequest::GetServerDefaultsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetServerDefaultsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerDefaultsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerDefaultsRequestDefaultTypeInternal() {}
  union {
    GetServerDefaultsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerDefaultsRequestDefaultTypeInternal _GetServerDefaultsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServerDefaultsResponse::GetServerDefaultsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.erverdefaults_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServerDefaultsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerDefaultsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerDefaultsResponseDefaultTypeInternal() {}
  union {
    GetServerDefaultsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerDefaultsResponseDefaultTypeInternal _GetServerDefaultsResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateRequest::CreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clientname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.flag_)*/ 0

  , /*decltype(_impl_.createparent_)*/ false

  , /*decltype(_impl_.blocksize_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateResponse::CreateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateResponseDefaultTypeInternal() {}
  union {
    CreateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
PROTOBUF_CONSTEXPR AppendRequest::AppendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clientname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendRequestDefaultTypeInternal() {}
  union {
    AppendRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendRequestDefaultTypeInternal _AppendRequest_default_instance_;
PROTOBUF_CONSTEXPR AppendResponse::AppendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendResponseDefaultTypeInternal() {}
  union {
    AppendResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendResponseDefaultTypeInternal _AppendResponse_default_instance_;
PROTOBUF_CONSTEXPR RenameRequest::RenameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dst_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameRequestDefaultTypeInternal() {}
  union {
    RenameRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameRequestDefaultTypeInternal _RenameRequest_default_instance_;
PROTOBUF_CONSTEXPR RenameResponse::RenameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameResponseDefaultTypeInternal() {}
  union {
    RenameResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameResponseDefaultTypeInternal _RenameResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recursive_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteResponse::DeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR SetPermissionRequest::SetPermissionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPermissionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPermissionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPermissionRequestDefaultTypeInternal() {}
  union {
    SetPermissionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPermissionRequestDefaultTypeInternal _SetPermissionRequest_default_instance_;
PROTOBUF_CONSTEXPR SetPermissionRespose::SetPermissionRespose(
    ::_pbi::ConstantInitialized) {}
struct SetPermissionResposeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPermissionResposeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPermissionResposeDefaultTypeInternal() {}
  union {
    SetPermissionRespose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPermissionResposeDefaultTypeInternal _SetPermissionRespose_default_instance_;
PROTOBUF_CONSTEXPR SetOwnerRequest::SetOwnerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.groupname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetOwnerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOwnerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOwnerRequestDefaultTypeInternal() {}
  union {
    SetOwnerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOwnerRequestDefaultTypeInternal _SetOwnerRequest_default_instance_;
PROTOBUF_CONSTEXPR SetOwnerResponse::SetOwnerResponse(
    ::_pbi::ConstantInitialized) {}
struct SetOwnerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetOwnerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetOwnerResponseDefaultTypeInternal() {}
  union {
    SetOwnerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetOwnerResponseDefaultTypeInternal _SetOwnerResponse_default_instance_;
PROTOBUF_CONSTEXPR mkdirRequest::mkdirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.createparent_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mkdirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mkdirRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~mkdirRequestDefaultTypeInternal() {}
  union {
    mkdirRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mkdirRequestDefaultTypeInternal _mkdirRequest_default_instance_;
PROTOBUF_CONSTEXPR mkdirResponse::mkdirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.issuccess_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mkdirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mkdirResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~mkdirResponseDefaultTypeInternal() {}
  union {
    mkdirResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mkdirResponseDefaultTypeInternal _mkdirResponse_default_instance_;
PROTOBUF_CONSTEXPR GetListingrRequest::GetListingrRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.startafter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.needlocation_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListingrRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListingrRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListingrRequestDefaultTypeInternal() {}
  union {
    GetListingrRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListingrRequestDefaultTypeInternal _GetListingrRequest_default_instance_;
PROTOBUF_CONSTEXPR GetListingResponse::GetListingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dirlist_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetListingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetListingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetListingResponseDefaultTypeInternal() {}
  union {
    GetListingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetListingResponseDefaultTypeInternal _GetListingResponse_default_instance_;
PROTOBUF_CONSTEXPR RenewLeaseRequest::RenewLeaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenewLeaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenewLeaseRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenewLeaseRequestDefaultTypeInternal() {}
  union {
    RenewLeaseRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenewLeaseRequestDefaultTypeInternal _RenewLeaseRequest_default_instance_;
PROTOBUF_CONSTEXPR RenewLeaseResponse::RenewLeaseResponse(
    ::_pbi::ConstantInitialized) {}
struct RenewLeaseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenewLeaseResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenewLeaseResponseDefaultTypeInternal() {}
  union {
    RenewLeaseResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenewLeaseResponseDefaultTypeInternal _RenewLeaseResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_ClientNamenode_2eproto[22];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ClientNamenode_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ClientNamenode_2eproto = nullptr;
const ::uint32_t TableStruct_ClientNamenode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationsRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationsRequest, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationsRequest, _impl_.length_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetBlockLocationResponse, _impl_.location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetServerDefaultsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetServerDefaultsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetServerDefaultsResponse, _impl_.erverdefaults_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.clientname_),
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.flag_),
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.permission_),
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.createparent_),
    PROTOBUF_FIELD_OFFSET(::CreateRequest, _impl_.blocksize_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CreateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CreateResponse, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::AppendRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::AppendRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::AppendRequest, _impl_.clientname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::AppendResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::AppendResponse, _impl_.block_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RenameRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RenameRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::RenameRequest, _impl_.dst_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RenameResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RenameResponse, _impl_.result_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::DeleteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DeleteRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::DeleteRequest, _impl_.recursive_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::DeleteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::DeleteResponse, _impl_.result_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SetPermissionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SetPermissionRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::SetPermissionRequest, _impl_.permission_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SetPermissionRespose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SetOwnerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SetOwnerRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::SetOwnerRequest, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::SetOwnerRequest, _impl_.groupname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SetOwnerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mkdirRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mkdirRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::mkdirRequest, _impl_.permission_),
    PROTOBUF_FIELD_OFFSET(::mkdirRequest, _impl_.createparent_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mkdirResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mkdirResponse, _impl_.issuccess_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetListingrRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetListingrRequest, _impl_.src_),
    PROTOBUF_FIELD_OFFSET(::GetListingrRequest, _impl_.startafter_),
    PROTOBUF_FIELD_OFFSET(::GetListingrRequest, _impl_.needlocation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetListingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetListingResponse, _impl_.dirlist_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RenewLeaseRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::RenewLeaseRequest, _impl_.clientname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::RenewLeaseResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::GetBlockLocationsRequest)},
        { 11, -1, -1, sizeof(::GetBlockLocationResponse)},
        { 20, -1, -1, sizeof(::GetServerDefaultsRequest)},
        { 28, -1, -1, sizeof(::GetServerDefaultsResponse)},
        { 37, -1, -1, sizeof(::CreateRequest)},
        { 51, -1, -1, sizeof(::CreateResponse)},
        { 60, -1, -1, sizeof(::AppendRequest)},
        { 70, -1, -1, sizeof(::AppendResponse)},
        { 79, -1, -1, sizeof(::RenameRequest)},
        { 89, -1, -1, sizeof(::RenameResponse)},
        { 98, -1, -1, sizeof(::DeleteRequest)},
        { 108, -1, -1, sizeof(::DeleteResponse)},
        { 117, -1, -1, sizeof(::SetPermissionRequest)},
        { 127, -1, -1, sizeof(::SetPermissionRespose)},
        { 135, -1, -1, sizeof(::SetOwnerRequest)},
        { 146, -1, -1, sizeof(::SetOwnerResponse)},
        { 154, -1, -1, sizeof(::mkdirRequest)},
        { 165, -1, -1, sizeof(::mkdirResponse)},
        { 174, -1, -1, sizeof(::GetListingrRequest)},
        { 185, -1, -1, sizeof(::GetListingResponse)},
        { 194, -1, -1, sizeof(::RenewLeaseRequest)},
        { 203, -1, -1, sizeof(::RenewLeaseResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_GetBlockLocationsRequest_default_instance_._instance,
    &::_GetBlockLocationResponse_default_instance_._instance,
    &::_GetServerDefaultsRequest_default_instance_._instance,
    &::_GetServerDefaultsResponse_default_instance_._instance,
    &::_CreateRequest_default_instance_._instance,
    &::_CreateResponse_default_instance_._instance,
    &::_AppendRequest_default_instance_._instance,
    &::_AppendResponse_default_instance_._instance,
    &::_RenameRequest_default_instance_._instance,
    &::_RenameResponse_default_instance_._instance,
    &::_DeleteRequest_default_instance_._instance,
    &::_DeleteResponse_default_instance_._instance,
    &::_SetPermissionRequest_default_instance_._instance,
    &::_SetPermissionRespose_default_instance_._instance,
    &::_SetOwnerRequest_default_instance_._instance,
    &::_SetOwnerResponse_default_instance_._instance,
    &::_mkdirRequest_default_instance_._instance,
    &::_mkdirResponse_default_instance_._instance,
    &::_GetListingrRequest_default_instance_._instance,
    &::_GetListingResponse_default_instance_._instance,
    &::_RenewLeaseRequest_default_instance_._instance,
    &::_RenewLeaseResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ClientNamenode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024ClientNamenode.proto\032\tdfs.proto\"G\n\030Get"
    "BlockLocationsRequest\022\013\n\003src\030\001 \001(\t\022\016\n\006of"
    "fset\030\002 \001(\004\022\016\n\006length\030\003 \001(\004\"<\n\030GetBlockLo"
    "cationResponse\022 \n\010location\030\001 \001(\0132\016.Locat"
    "edBlocks\"\032\n\030GetServerDefaultsRequest\"C\n\031"
    "GetServerDefaultsResponse\022&\n\rerverDefaul"
    "ts\030\001 \001(\0132\017.ServerDefaults\"\225\001\n\rCreateRequ"
    "est\022\013\n\003src\030\001 \001(\t\022\022\n\nclientName\030\002 \001(\t\022\031\n\004"
    "flag\030\003 \001(\0162\013.CreateFlag\022\037\n\npermission\030\004 "
    "\001(\0132\013.Permission\022\024\n\014createParent\030\005 \001(\010\022\021"
    "\n\tblockSize\030\006 \001(\004\"-\n\016CreateResponse\022\033\n\006s"
    "tatus\030\001 \001(\0132\013.FileStatus\"0\n\rAppendReques"
    "t\022\013\n\003src\030\001 \001(\t\022\022\n\nclientName\030\002 \001(\t\".\n\016Ap"
    "pendResponse\022\034\n\005block\030\001 \001(\0132\r.LocatedBlo"
    "ck\")\n\rRenameRequest\022\013\n\003src\030\001 \001(\t\022\013\n\003dst\030"
    "\002 \001(\t\" \n\016RenameResponse\022\016\n\006result\030\001 \001(\010\""
    "/\n\rDeleteRequest\022\013\n\003src\030\001 \001(\t\022\021\n\trecursi"
    "ve\030\002 \001(\010\" \n\016DeleteResponse\022\016\n\006result\030\001 \001"
    "(\010\"D\n\024SetPermissionRequest\022\013\n\003src\030\001 \001(\t\022"
    "\037\n\npermission\030\002 \001(\0132\013.Permission\"\026\n\024SetP"
    "ermissionRespose\"C\n\017SetOwnerRequest\022\013\n\003s"
    "rc\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\021\n\tgroupname\030"
    "\003 \001(\t\"\022\n\020SetOwnerResponse\"R\n\014mkdirReques"
    "t\022\013\n\003src\030\001 \001(\t\022\037\n\npermission\030\002 \001(\0132\013.Per"
    "mission\022\024\n\014createParent\030\003 \001(\010\"\"\n\rmkdirRe"
    "sponse\022\021\n\tisSuccess\030\001 \001(\010\"K\n\022GetListingr"
    "Request\022\013\n\003src\030\001 \001(\t\022\022\n\nstartAfter\030\002 \001(\014"
    "\022\024\n\014needLocation\030\003 \001(\010\"8\n\022GetListingResp"
    "onse\022\"\n\007dirList\030\001 \001(\0132\021.DirectoryListing"
    "\"\'\n\021RenewLeaseRequest\022\022\n\nClientName\030\001 \001("
    "\t\"\024\n\022RenewLeaseResponse*3\n\nCreateFlag\022\n\n"
    "\006CREATE\020\000\022\r\n\tOVERWRITE\020\001\022\n\n\006APPEND\020\0022\310\004\n"
    "\rClientService\022H\n\020GetBlockLocation\022\031.Get"
    "BlockLocationsRequest\032\031.GetBlockLocation"
    "Response\022J\n\021GetServerDefaults\022\031.GetServe"
    "rDefaultsRequest\032\032.GetServerDefaultsResp"
    "onse\022)\n\006Create\022\016.CreateRequest\032\017.CreateR"
    "esponse\022)\n\006Append\022\016.AppendRequest\032\017.Appe"
    "ndResponse\022)\n\006Rename\022\016.RenameRequest\032\017.R"
    "enameResponse\022)\n\006Delete\022\016.DeleteRequest\032"
    "\017.DeleteResponse\0224\n\rSetPermission\022\020.SetO"
    "wnerRequest\032\021.SetOwnerResponse\022/\n\010SetOwn"
    "er\022\020.SetOwnerRequest\032\021.SetOwnerResponse\022"
    "&\n\005mkdir\022\r.mkdirRequest\032\016.mkdirResponse\022"
    "3\n\007Listing\022\023.GetListingrRequest\032\023.GetLis"
    "tingResponse\0221\n\nRenewLease\022\022.RenewLeaseR"
    "equest\032\017.RenameResponseb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ClientNamenode_2eproto_deps[1] =
    {
        &::descriptor_table_dfs_2eproto,
};
static ::absl::once_flag descriptor_table_ClientNamenode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ClientNamenode_2eproto = {
    false,
    false,
    1871,
    descriptor_table_protodef_ClientNamenode_2eproto,
    "ClientNamenode.proto",
    &descriptor_table_ClientNamenode_2eproto_once,
    descriptor_table_ClientNamenode_2eproto_deps,
    1,
    22,
    schemas,
    file_default_instances,
    TableStruct_ClientNamenode_2eproto::offsets,
    file_level_metadata_ClientNamenode_2eproto,
    file_level_enum_descriptors_ClientNamenode_2eproto,
    file_level_service_descriptors_ClientNamenode_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ClientNamenode_2eproto_getter() {
  return &descriptor_table_ClientNamenode_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ClientNamenode_2eproto(&descriptor_table_ClientNamenode_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ClientNamenode_2eproto);
  return file_level_enum_descriptors_ClientNamenode_2eproto[0];
}
bool CreateFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class GetBlockLocationsRequest::_Internal {
 public:
};

GetBlockLocationsRequest::GetBlockLocationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetBlockLocationsRequest)
}
GetBlockLocationsRequest::GetBlockLocationsRequest(const GetBlockLocationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockLocationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.offset_) {}

    , decltype(_impl_.length_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:GetBlockLocationsRequest)
}

inline void GetBlockLocationsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.offset_) { ::uint64_t{0u} }

    , decltype(_impl_.length_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBlockLocationsRequest::~GetBlockLocationsRequest() {
  // @@protoc_insertion_point(destructor:GetBlockLocationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockLocationsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
}

void GetBlockLocationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockLocationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBlockLocationsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  ::memset(&_impl_.offset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockLocationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetBlockLocationsRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlockLocationsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBlockLocationsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetBlockLocationsRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_offset(), target);
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBlockLocationsRequest)
  return target;
}

::size_t GetBlockLocationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBlockLocationsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_offset());
  }

  // uint64 length = 3;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockLocationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockLocationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockLocationsRequest::GetClassData() const { return &_class_data_; }


void GetBlockLocationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockLocationsRequest*>(&to_msg);
  auto& from = static_cast<const GetBlockLocationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetBlockLocationsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockLocationsRequest::CopyFrom(const GetBlockLocationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBlockLocationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationsRequest::IsInitialized() const {
  return true;
}

void GetBlockLocationsRequest::InternalSwap(GetBlockLocationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlockLocationsRequest, _impl_.length_)
      + sizeof(GetBlockLocationsRequest::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(GetBlockLocationsRequest, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[0]);
}
// ===================================================================

class GetBlockLocationResponse::_Internal {
 public:
  static const ::LocatedBlocks& location(const GetBlockLocationResponse* msg);
};

const ::LocatedBlocks&
GetBlockLocationResponse::_Internal::location(const GetBlockLocationResponse* msg) {
  return *msg->_impl_.location_;
}
void GetBlockLocationResponse::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
GetBlockLocationResponse::GetBlockLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetBlockLocationResponse)
}
GetBlockLocationResponse::GetBlockLocationResponse(const GetBlockLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockLocationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::LocatedBlocks(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:GetBlockLocationResponse)
}

inline void GetBlockLocationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBlockLocationResponse::~GetBlockLocationResponse() {
  // @@protoc_insertion_point(destructor:GetBlockLocationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockLocationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GetBlockLocationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetBlockLocationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockLocationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LocatedBlocks location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlockLocationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetBlockLocationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LocatedBlocks location = 1;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetBlockLocationResponse)
  return target;
}

::size_t GetBlockLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetBlockLocationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LocatedBlocks location = 1;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockLocationResponse::GetClassData() const { return &_class_data_; }


void GetBlockLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockLocationResponse*>(&to_msg);
  auto& from = static_cast<const GetBlockLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetBlockLocationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::LocatedBlocks::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockLocationResponse::CopyFrom(const GetBlockLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetBlockLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationResponse::IsInitialized() const {
  return true;
}

void GetBlockLocationResponse::InternalSwap(GetBlockLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockLocationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[1]);
}
// ===================================================================

class GetServerDefaultsRequest::_Internal {
 public:
};

GetServerDefaultsRequest::GetServerDefaultsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:GetServerDefaultsRequest)
}
GetServerDefaultsRequest::GetServerDefaultsRequest(const GetServerDefaultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetServerDefaultsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetServerDefaultsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerDefaultsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerDefaultsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[2]);
}
// ===================================================================

class GetServerDefaultsResponse::_Internal {
 public:
  static const ::ServerDefaults& erverdefaults(const GetServerDefaultsResponse* msg);
};

const ::ServerDefaults&
GetServerDefaultsResponse::_Internal::erverdefaults(const GetServerDefaultsResponse* msg) {
  return *msg->_impl_.erverdefaults_;
}
void GetServerDefaultsResponse::clear_erverdefaults() {
  if (GetArenaForAllocation() == nullptr && _impl_.erverdefaults_ != nullptr) {
    delete _impl_.erverdefaults_;
  }
  _impl_.erverdefaults_ = nullptr;
}
GetServerDefaultsResponse::GetServerDefaultsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetServerDefaultsResponse)
}
GetServerDefaultsResponse::GetServerDefaultsResponse(const GetServerDefaultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerDefaultsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.erverdefaults_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_erverdefaults()) {
    _this->_impl_.erverdefaults_ = new ::ServerDefaults(*from._impl_.erverdefaults_);
  }
  // @@protoc_insertion_point(copy_constructor:GetServerDefaultsResponse)
}

inline void GetServerDefaultsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.erverdefaults_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetServerDefaultsResponse::~GetServerDefaultsResponse() {
  // @@protoc_insertion_point(destructor:GetServerDefaultsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerDefaultsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.erverdefaults_;
}

void GetServerDefaultsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerDefaultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetServerDefaultsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.erverdefaults_ != nullptr) {
    delete _impl_.erverdefaults_;
  }
  _impl_.erverdefaults_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerDefaultsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerDefaults erverDefaults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_erverdefaults(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServerDefaultsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetServerDefaultsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerDefaults erverDefaults = 1;
  if (this->_internal_has_erverdefaults()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::erverdefaults(this),
        _Internal::erverdefaults(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetServerDefaultsResponse)
  return target;
}

::size_t GetServerDefaultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetServerDefaultsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerDefaults erverDefaults = 1;
  if (this->_internal_has_erverdefaults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.erverdefaults_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerDefaultsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerDefaultsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerDefaultsResponse::GetClassData() const { return &_class_data_; }


void GetServerDefaultsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerDefaultsResponse*>(&to_msg);
  auto& from = static_cast<const GetServerDefaultsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetServerDefaultsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_erverdefaults()) {
    _this->_internal_mutable_erverdefaults()->::ServerDefaults::MergeFrom(
        from._internal_erverdefaults());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerDefaultsResponse::CopyFrom(const GetServerDefaultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetServerDefaultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsResponse::IsInitialized() const {
  return true;
}

void GetServerDefaultsResponse::InternalSwap(GetServerDefaultsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.erverdefaults_, other->_impl_.erverdefaults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerDefaultsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[3]);
}
// ===================================================================

class CreateRequest::_Internal {
 public:
  static const ::Permission& permission(const CreateRequest* msg);
};

const ::Permission&
CreateRequest::_Internal::permission(const CreateRequest* msg) {
  return *msg->_impl_.permission_;
}
void CreateRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.clientname_) {}

    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.flag_) {}

    , decltype(_impl_.createparent_) {}

    , decltype(_impl_.blocksize_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.flag_, &from._impl_.flag_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.blocksize_) -
    reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.blocksize_));
  // @@protoc_insertion_point(copy_constructor:CreateRequest)
}

inline void CreateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.clientname_) {}

    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.flag_) { 0 }

    , decltype(_impl_.createparent_) { false }

    , decltype(_impl_.blocksize_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:CreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.clientname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void CreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.clientname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  ::memset(&_impl_.flag_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocksize_) -
      reinterpret_cast<char*>(&_impl_.flag_)) + sizeof(_impl_.blocksize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .CreateFlag flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::CreateFlag>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .Permission permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool createParent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 blockSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.blocksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "CreateRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    const std::string& _s = this->_internal_clientname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "CreateRequest.clientName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .CreateFlag flag = 3;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_flag(), target);
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // bool createParent = 5;
  if (this->_internal_createparent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_createparent(), target);
  }

  // uint64 blockSize = 6;
  if (this->_internal_blocksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_blocksize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRequest)
  return target;
}

::size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clientname());
  }

  // .Permission permission = 4;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // .CreateFlag flag = 3;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // bool createParent = 5;
  if (this->_internal_createparent() != 0) {
    total_size += 2;
  }

  // uint64 blockSize = 6;
  if (this->_internal_blocksize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_blocksize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }


void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRequest*>(&to_msg);
  auto& from = static_cast<const CreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_createparent() != 0) {
    _this->_internal_set_createparent(from._internal_createparent());
  }
  if (from._internal_blocksize() != 0) {
    _this->_internal_set_blocksize(from._internal_blocksize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clientname_, lhs_arena,
                                       &other->_impl_.clientname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.blocksize_)
      + sizeof(CreateRequest::_impl_.blocksize_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[4]);
}
// ===================================================================

class CreateResponse::_Internal {
 public:
  static const ::FileStatus& status(const CreateResponse* msg);
};

const ::FileStatus&
CreateResponse::_Internal::status(const CreateResponse* msg) {
  return *msg->_impl_.status_;
}
void CreateResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
CreateResponse::CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CreateResponse)
}
CreateResponse::CreateResponse(const CreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::FileStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:CreateResponse)
}

inline void CreateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:CreateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void CreateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FileStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileStatus status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateResponse)
  return target;
}

::size_t CreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FileStatus status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateResponse::GetClassData() const { return &_class_data_; }


void CreateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateResponse*>(&to_msg);
  auto& from = static_cast<const CreateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::FileStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {
  return true;
}

void CreateResponse::InternalSwap(CreateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[5]);
}
// ===================================================================

class AppendRequest::_Internal {
 public:
};

AppendRequest::AppendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AppendRequest)
}
AppendRequest::AppendRequest(const AppendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.clientname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AppendRequest)
}

inline void AppendRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.clientname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendRequest::~AppendRequest() {
  // @@protoc_insertion_point(destructor:AppendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.clientname_.Destroy();
}

void AppendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.clientname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AppendRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string clientName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AppendRequest.clientName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AppendRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "AppendRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    const std::string& _s = this->_internal_clientname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "AppendRequest.clientName");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendRequest)
  return target;
}

::size_t AppendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // string clientName = 2;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clientname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendRequest::GetClassData() const { return &_class_data_; }


void AppendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendRequest*>(&to_msg);
  auto& from = static_cast<const AppendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppendRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendRequest::CopyFrom(const AppendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequest::IsInitialized() const {
  return true;
}

void AppendRequest::InternalSwap(AppendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clientname_, lhs_arena,
                                       &other->_impl_.clientname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[6]);
}
// ===================================================================

class AppendResponse::_Internal {
 public:
  static const ::LocatedBlock& block(const AppendResponse* msg);
};

const ::LocatedBlock&
AppendResponse::_Internal::block(const AppendResponse* msg) {
  return *msg->_impl_.block_;
}
void AppendResponse::clear_block() {
  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
}
AppendResponse::AppendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AppendResponse)
}
AppendResponse::AppendResponse(const AppendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    _this->_impl_.block_ = new ::LocatedBlock(*from._impl_.block_);
  }
  // @@protoc_insertion_point(copy_constructor:AppendResponse)
}

inline void AppendResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.block_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendResponse::~AppendResponse() {
  // @@protoc_insertion_point(destructor:AppendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_;
}

void AppendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.block_ != nullptr) {
    delete _impl_.block_;
  }
  _impl_.block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LocatedBlock block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AppendResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppendResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .LocatedBlock block = 1;
  if (this->_internal_has_block()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block(this),
        _Internal::block(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendResponse)
  return target;
}

::size_t AppendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LocatedBlock block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendResponse::GetClassData() const { return &_class_data_; }


void AppendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendResponse*>(&to_msg);
  auto& from = static_cast<const AppendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AppendResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _this->_internal_mutable_block()->::LocatedBlock::MergeFrom(
        from._internal_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendResponse::CopyFrom(const AppendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResponse::IsInitialized() const {
  return true;
}

void AppendResponse::InternalSwap(AppendResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.block_, other->_impl_.block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[7]);
}
// ===================================================================

class RenameRequest::_Internal {
 public:
};

RenameRequest::RenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.dst_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dst().empty()) {
    _this->_impl_.dst_.Set(from._internal_dst(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RenameRequest)
}

inline void RenameRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.dst_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dst_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:RenameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.dst_.Destroy();
}

void RenameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RenameRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.dst_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenameRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenameRequest.dst"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenameRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenameRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RenameRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    const std::string& _s = this->_internal_dst();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RenameRequest.dst");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenameRequest)
  return target;
}

::size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenameRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // string dst = 2;
  if (!this->_internal_dst().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameRequest::GetClassData() const { return &_class_data_; }


void RenameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameRequest*>(&to_msg);
  auto& from = static_cast<const RenameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenameRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_dst().empty()) {
    _this->_internal_set_dst(from._internal_dst());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::InternalSwap(RenameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dst_, lhs_arena,
                                       &other->_impl_.dst_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[8]);
}
// ===================================================================

class RenameResponse::_Internal {
 public:
};

RenameResponse::RenameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RenameResponse)
}
RenameResponse::RenameResponse(const RenameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RenameResponse)
}

inline void RenameResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RenameResponse::~RenameResponse() {
  // @@protoc_insertion_point(destructor:RenameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RenameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RenameResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenameResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenameResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenameResponse)
  return target;
}

::size_t RenameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenameResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameResponse::GetClassData() const { return &_class_data_; }


void RenameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameResponse*>(&to_msg);
  auto& from = static_cast<const RenameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenameResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameResponse::CopyFrom(const RenameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResponse::IsInitialized() const {
  return true;
}

void RenameResponse::InternalSwap(RenameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[9]);
}
// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.recursive_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _this->_impl_.recursive_ = from._impl_.recursive_;
  // @@protoc_insertion_point(copy_constructor:DeleteRequest)
}

inline void DeleteRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.recursive_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
}

void DeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.recursive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DeleteRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool recursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.recursive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeleteRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "DeleteRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool recursive = 2;
  if (this->_internal_recursive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_recursive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteRequest)
  return target;
}

::size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // bool recursive = 2;
  if (this->_internal_recursive() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }


void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteRequest*>(&to_msg);
  auto& from = static_cast<const DeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeleteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_recursive() != 0) {
    _this->_internal_set_recursive(from._internal_recursive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);

  swap(_impl_.recursive_, other->_impl_.recursive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[10]);
}
// ===================================================================

class DeleteResponse::_Internal {
 public:
};

DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeleteResponse)
}

inline void DeleteResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:DeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeleteResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeleteResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteResponse)
  return target;
}

::size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }


void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteResponse*>(&to_msg);
  auto& from = static_cast<const DeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeleteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[11]);
}
// ===================================================================

class SetPermissionRequest::_Internal {
 public:
  static const ::Permission& permission(const SetPermissionRequest* msg);
};

const ::Permission&
SetPermissionRequest::_Internal::permission(const SetPermissionRequest* msg) {
  return *msg->_impl_.permission_;
}
void SetPermissionRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
SetPermissionRequest::SetPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetPermissionRequest)
}
SetPermissionRequest::SetPermissionRequest(const SetPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPermissionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  // @@protoc_insertion_point(copy_constructor:SetPermissionRequest)
}

inline void SetPermissionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.permission_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPermissionRequest::~SetPermissionRequest() {
  // @@protoc_insertion_point(destructor:SetPermissionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPermissionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void SetPermissionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetPermissionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPermissionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SetPermissionRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .Permission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetPermissionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetPermissionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SetPermissionRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetPermissionRequest)
  return target;
}

::size_t SetPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetPermissionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPermissionRequest::GetClassData() const { return &_class_data_; }


void SetPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPermissionRequest*>(&to_msg);
  auto& from = static_cast<const SetPermissionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SetPermissionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPermissionRequest::CopyFrom(const SetPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionRequest::IsInitialized() const {
  return true;
}

void SetPermissionRequest::InternalSwap(SetPermissionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  swap(_impl_.permission_, other->_impl_.permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[12]);
}
// ===================================================================

class SetPermissionRespose::_Internal {
 public:
};

SetPermissionRespose::SetPermissionRespose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:SetPermissionRespose)
}
SetPermissionRespose::SetPermissionRespose(const SetPermissionRespose& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetPermissionRespose* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SetPermissionRespose)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPermissionRespose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPermissionRespose::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetPermissionRespose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[13]);
}
// ===================================================================

class SetOwnerRequest::_Internal {
 public:
};

SetOwnerRequest::SetOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SetOwnerRequest)
}
SetOwnerRequest::SetOwnerRequest(const SetOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetOwnerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.groupname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    _this->_impl_.groupname_.Set(from._internal_groupname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SetOwnerRequest)
}

inline void SetOwnerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.groupname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.groupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.groupname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetOwnerRequest::~SetOwnerRequest() {
  // @@protoc_insertion_point(destructor:SetOwnerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetOwnerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.username_.Destroy();
  _impl_.groupname_.Destroy();
}

void SetOwnerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SetOwnerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.groupname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOwnerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SetOwnerRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SetOwnerRequest.username"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string groupname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_groupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SetOwnerRequest.groupname"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetOwnerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetOwnerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SetOwnerRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SetOwnerRequest.username");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string groupname = 3;
  if (!this->_internal_groupname().empty()) {
    const std::string& _s = this->_internal_groupname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SetOwnerRequest.groupname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetOwnerRequest)
  return target;
}

::size_t SetOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetOwnerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // string groupname = 3;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_groupname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOwnerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetOwnerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOwnerRequest::GetClassData() const { return &_class_data_; }


void SetOwnerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetOwnerRequest*>(&to_msg);
  auto& from = static_cast<const SetOwnerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SetOwnerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_groupname().empty()) {
    _this->_internal_set_groupname(from._internal_groupname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetOwnerRequest::CopyFrom(const SetOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerRequest::IsInitialized() const {
  return true;
}

void SetOwnerRequest::InternalSwap(SetOwnerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.groupname_, lhs_arena,
                                       &other->_impl_.groupname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[14]);
}
// ===================================================================

class SetOwnerResponse::_Internal {
 public:
};

SetOwnerResponse::SetOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:SetOwnerResponse)
}
SetOwnerResponse::SetOwnerResponse(const SetOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetOwnerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SetOwnerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetOwnerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetOwnerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetOwnerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[15]);
}
// ===================================================================

class mkdirRequest::_Internal {
 public:
  static const ::Permission& permission(const mkdirRequest* msg);
};

const ::Permission&
mkdirRequest::_Internal::permission(const mkdirRequest* msg) {
  return *msg->_impl_.permission_;
}
void mkdirRequest::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
mkdirRequest::mkdirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mkdirRequest)
}
mkdirRequest::mkdirRequest(const mkdirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mkdirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.createparent_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    _this->_impl_.permission_ = new ::Permission(*from._impl_.permission_);
  }
  _this->_impl_.createparent_ = from._impl_.createparent_;
  // @@protoc_insertion_point(copy_constructor:mkdirRequest)
}

inline void mkdirRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.createparent_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mkdirRequest::~mkdirRequest() {
  // @@protoc_insertion_point(destructor:mkdirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mkdirRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void mkdirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mkdirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mkdirRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
  _impl_.createparent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mkdirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mkdirRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .Permission permission = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool createParent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.createparent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* mkdirRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkdirRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mkdirRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // bool createParent = 3;
  if (this->_internal_createparent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_createparent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkdirRequest)
  return target;
}

::size_t mkdirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mkdirRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // .Permission permission = 2;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.permission_);
  }

  // bool createParent = 3;
  if (this->_internal_createparent() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mkdirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mkdirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mkdirRequest::GetClassData() const { return &_class_data_; }


void mkdirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mkdirRequest*>(&to_msg);
  auto& from = static_cast<const mkdirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mkdirRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_has_permission()) {
    _this->_internal_mutable_permission()->::Permission::MergeFrom(
        from._internal_permission());
  }
  if (from._internal_createparent() != 0) {
    _this->_internal_set_createparent(from._internal_createparent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mkdirRequest::CopyFrom(const mkdirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mkdirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdirRequest::IsInitialized() const {
  return true;
}

void mkdirRequest::InternalSwap(mkdirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mkdirRequest, _impl_.createparent_)
      + sizeof(mkdirRequest::_impl_.createparent_)
      - PROTOBUF_FIELD_OFFSET(mkdirRequest, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mkdirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[16]);
}
// ===================================================================

class mkdirResponse::_Internal {
 public:
};

mkdirResponse::mkdirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mkdirResponse)
}
mkdirResponse::mkdirResponse(const mkdirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mkdirResponse)
}

inline void mkdirResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccess_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

mkdirResponse::~mkdirResponse() {
  // @@protoc_insertion_point(destructor:mkdirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mkdirResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void mkdirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mkdirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mkdirResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mkdirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* mkdirResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mkdirResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mkdirResponse)
  return target;
}

::size_t mkdirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mkdirResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccess = 1;
  if (this->_internal_issuccess() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mkdirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mkdirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mkdirResponse::GetClassData() const { return &_class_data_; }


void mkdirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mkdirResponse*>(&to_msg);
  auto& from = static_cast<const mkdirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mkdirResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issuccess() != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mkdirResponse::CopyFrom(const mkdirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mkdirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mkdirResponse::IsInitialized() const {
  return true;
}

void mkdirResponse::InternalSwap(mkdirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.issuccess_, other->_impl_.issuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mkdirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[17]);
}
// ===================================================================

class GetListingrRequest::_Internal {
 public:
};

GetListingrRequest::GetListingrRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetListingrRequest)
}
GetListingrRequest::GetListingrRequest(const GetListingrRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListingrRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.startafter_) {}

    , decltype(_impl_.needlocation_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), _this->GetArenaForAllocation());
  }
  _impl_.startafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.startafter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_startafter().empty()) {
    _this->_impl_.startafter_.Set(from._internal_startafter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.needlocation_ = from._impl_.needlocation_;
  // @@protoc_insertion_point(copy_constructor:GetListingrRequest)
}

inline void GetListingrRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.src_) {}

    , decltype(_impl_.startafter_) {}

    , decltype(_impl_.needlocation_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.startafter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.startafter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetListingrRequest::~GetListingrRequest() {
  // @@protoc_insertion_point(destructor:GetListingrRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListingrRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_.Destroy();
  _impl_.startafter_.Destroy();
}

void GetListingrRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListingrRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetListingrRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_.ClearToEmpty();
  _impl_.startafter_.ClearToEmpty();
  _impl_.needlocation_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListingrRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetListingrRequest.src"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes startAfter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_startafter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool needLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.needlocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetListingrRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetListingrRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    const std::string& _s = this->_internal_src();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetListingrRequest.src");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes startAfter = 2;
  if (!this->_internal_startafter().empty()) {
    const std::string& _s = this->_internal_startafter();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bool needLocation = 3;
  if (this->_internal_needlocation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_needlocation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetListingrRequest)
  return target;
}

::size_t GetListingrRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetListingrRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src = 1;
  if (!this->_internal_src().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src());
  }

  // bytes startAfter = 2;
  if (!this->_internal_startafter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_startafter());
  }

  // bool needLocation = 3;
  if (this->_internal_needlocation() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListingrRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListingrRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListingrRequest::GetClassData() const { return &_class_data_; }


void GetListingrRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListingrRequest*>(&to_msg);
  auto& from = static_cast<const GetListingrRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetListingrRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  if (!from._internal_startafter().empty()) {
    _this->_internal_set_startafter(from._internal_startafter());
  }
  if (from._internal_needlocation() != 0) {
    _this->_internal_set_needlocation(from._internal_needlocation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListingrRequest::CopyFrom(const GetListingrRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetListingrRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingrRequest::IsInitialized() const {
  return true;
}

void GetListingrRequest::InternalSwap(GetListingrRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_, lhs_arena,
                                       &other->_impl_.src_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.startafter_, lhs_arena,
                                       &other->_impl_.startafter_, rhs_arena);

  swap(_impl_.needlocation_, other->_impl_.needlocation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingrRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[18]);
}
// ===================================================================

class GetListingResponse::_Internal {
 public:
  static const ::DirectoryListing& dirlist(const GetListingResponse* msg);
};

const ::DirectoryListing&
GetListingResponse::_Internal::dirlist(const GetListingResponse* msg) {
  return *msg->_impl_.dirlist_;
}
void GetListingResponse::clear_dirlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.dirlist_ != nullptr) {
    delete _impl_.dirlist_;
  }
  _impl_.dirlist_ = nullptr;
}
GetListingResponse::GetListingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetListingResponse)
}
GetListingResponse::GetListingResponse(const GetListingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetListingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dirlist_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dirlist()) {
    _this->_impl_.dirlist_ = new ::DirectoryListing(*from._impl_.dirlist_);
  }
  // @@protoc_insertion_point(copy_constructor:GetListingResponse)
}

inline void GetListingResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dirlist_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetListingResponse::~GetListingResponse() {
  // @@protoc_insertion_point(destructor:GetListingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetListingResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dirlist_;
}

void GetListingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetListingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetListingResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.dirlist_ != nullptr) {
    delete _impl_.dirlist_;
  }
  _impl_.dirlist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetListingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DirectoryListing dirList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetListingResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetListingResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DirectoryListing dirList = 1;
  if (this->_internal_has_dirlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dirlist(this),
        _Internal::dirlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetListingResponse)
  return target;
}

::size_t GetListingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetListingResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DirectoryListing dirList = 1;
  if (this->_internal_has_dirlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dirlist_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetListingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetListingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetListingResponse::GetClassData() const { return &_class_data_; }


void GetListingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetListingResponse*>(&to_msg);
  auto& from = static_cast<const GetListingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetListingResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dirlist()) {
    _this->_internal_mutable_dirlist()->::DirectoryListing::MergeFrom(
        from._internal_dirlist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetListingResponse::CopyFrom(const GetListingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetListingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingResponse::IsInitialized() const {
  return true;
}

void GetListingResponse::InternalSwap(GetListingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dirlist_, other->_impl_.dirlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetListingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[19]);
}
// ===================================================================

class RenewLeaseRequest::_Internal {
 public:
};

RenewLeaseRequest::RenewLeaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:RenewLeaseRequest)
}
RenewLeaseRequest::RenewLeaseRequest(const RenewLeaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenewLeaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientname().empty()) {
    _this->_impl_.clientname_.Set(from._internal_clientname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RenewLeaseRequest)
}

inline void RenewLeaseRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.clientname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenewLeaseRequest::~RenewLeaseRequest() {
  // @@protoc_insertion_point(destructor:RenewLeaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenewLeaseRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientname_.Destroy();
}

void RenewLeaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenewLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RenewLeaseRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenewLeaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ClientName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenewLeaseRequest.ClientName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenewLeaseRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenewLeaseRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClientName = 1;
  if (!this->_internal_clientname().empty()) {
    const std::string& _s = this->_internal_clientname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "RenewLeaseRequest.ClientName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenewLeaseRequest)
  return target;
}

::size_t RenewLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenewLeaseRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientName = 1;
  if (!this->_internal_clientname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clientname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenewLeaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenewLeaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenewLeaseRequest::GetClassData() const { return &_class_data_; }


void RenewLeaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenewLeaseRequest*>(&to_msg);
  auto& from = static_cast<const RenewLeaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenewLeaseRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientname().empty()) {
    _this->_internal_set_clientname(from._internal_clientname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenewLeaseRequest::CopyFrom(const RenewLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenewLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseRequest::IsInitialized() const {
  return true;
}

void RenewLeaseRequest::InternalSwap(RenewLeaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clientname_, lhs_arena,
                                       &other->_impl_.clientname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[20]);
}
// ===================================================================

class RenewLeaseResponse::_Internal {
 public:
};

RenewLeaseResponse::RenewLeaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:RenewLeaseResponse)
}
RenewLeaseResponse::RenewLeaseResponse(const RenewLeaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RenewLeaseResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RenewLeaseResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenewLeaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenewLeaseResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RenewLeaseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ClientNamenode_2eproto_getter, &descriptor_table_ClientNamenode_2eproto_once,
      file_level_metadata_ClientNamenode_2eproto[21]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GetBlockLocationsRequest*
Arena::CreateMaybeMessage< ::GetBlockLocationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetBlockLocationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetBlockLocationResponse*
Arena::CreateMaybeMessage< ::GetBlockLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetBlockLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetServerDefaultsRequest*
Arena::CreateMaybeMessage< ::GetServerDefaultsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetServerDefaultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetServerDefaultsResponse*
Arena::CreateMaybeMessage< ::GetServerDefaultsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetServerDefaultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRequest*
Arena::CreateMaybeMessage< ::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateResponse*
Arena::CreateMaybeMessage< ::CreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendRequest*
Arena::CreateMaybeMessage< ::AppendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AppendResponse*
Arena::CreateMaybeMessage< ::AppendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RenameRequest*
Arena::CreateMaybeMessage< ::RenameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RenameResponse*
Arena::CreateMaybeMessage< ::RenameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteRequest*
Arena::CreateMaybeMessage< ::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DeleteResponse*
Arena::CreateMaybeMessage< ::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::SetPermissionRequest*
Arena::CreateMaybeMessage< ::SetPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetPermissionRespose*
Arena::CreateMaybeMessage< ::SetPermissionRespose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetPermissionRespose >(arena);
}
template<> PROTOBUF_NOINLINE ::SetOwnerRequest*
Arena::CreateMaybeMessage< ::SetOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SetOwnerResponse*
Arena::CreateMaybeMessage< ::SetOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mkdirRequest*
Arena::CreateMaybeMessage< ::mkdirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mkdirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mkdirResponse*
Arena::CreateMaybeMessage< ::mkdirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mkdirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetListingrRequest*
Arena::CreateMaybeMessage< ::GetListingrRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetListingrRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetListingResponse*
Arena::CreateMaybeMessage< ::GetListingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetListingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RenewLeaseRequest*
Arena::CreateMaybeMessage< ::RenewLeaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenewLeaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RenewLeaseResponse*
Arena::CreateMaybeMessage< ::RenewLeaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenewLeaseResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
