// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ClientNamenode.proto

#include "ClientNamenode.pb.h"
#include "ClientNamenode.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* ClientService_method_names[] = {
  "/ClientService/GetBlockLocation",
  "/ClientService/GetServerDefaults",
  "/ClientService/Create",
  "/ClientService/Append",
  "/ClientService/Rename",
  "/ClientService/Delete",
  "/ClientService/SetPermission",
  "/ClientService/SetOwner",
  "/ClientService/mkdir",
  "/ClientService/Listing",
  "/ClientService/RenewLease",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBlockLocation_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerDefaults_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Create_(ClientService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Append_(ClientService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rename_(ClientService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(ClientService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPermission_(ClientService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOwner_(ClientService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mkdir_(ClientService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Listing_(ClientService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewLease_(ClientService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::GetBlockLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetBlockLocationsRequest, ::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockLocation_, context, request, response);
}

void ClientService::Stub::async::GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetBlockLocationsRequest, ::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockLocation_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetBlockLocation(::grpc::ClientContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>* ClientService::Stub::PrepareAsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetBlockLocationResponse, ::GetBlockLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetBlockLocationResponse>* ClientService::Stub::AsyncGetBlockLocationRaw(::grpc::ClientContext* context, const ::GetBlockLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::GetServerDefaultsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetServerDefaultsRequest, ::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerDefaults_, context, request, response);
}

void ClientService::Stub::async::GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetServerDefaultsRequest, ::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerDefaults_, context, request, response, std::move(f));
}

void ClientService::Stub::async::GetServerDefaults(::grpc::ClientContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerDefaults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>* ClientService::Stub::PrepareAsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetServerDefaultsResponse, ::GetServerDefaultsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerDefaults_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetServerDefaultsResponse>* ClientService::Stub::AsyncGetServerDefaultsRaw(::grpc::ClientContext* context, const ::GetServerDefaultsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerDefaultsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Create(::grpc::ClientContext* context, const ::CreateRequest& request, ::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CreateRequest, ::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void ClientService::Stub::async::Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CreateRequest, ::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Create(::grpc::ClientContext* context, const ::CreateRequest* request, ::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CreateResponse>* ClientService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CreateResponse, ::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CreateResponse>* ClientService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Append(::grpc::ClientContext* context, const ::AppendRequest& request, ::AppendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Append_, context, request, response);
}

void ClientService::Stub::async::Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Append(::grpc::ClientContext* context, const ::AppendRequest* request, ::AppendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Append_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppendResponse>* ClientService::Stub::PrepareAsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AppendResponse, ::AppendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Append_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AppendResponse>* ClientService::Stub::AsyncAppendRaw(::grpc::ClientContext* context, const ::AppendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Rename(::grpc::ClientContext* context, const ::RenameRequest& request, ::RenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RenameRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rename_, context, request, response);
}

void ClientService::Stub::async::Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RenameRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Rename(::grpc::ClientContext* context, const ::RenameRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rename_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RenameResponse>* ClientService::Stub::PrepareAsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RenameResponse, ::RenameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rename_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RenameResponse>* ClientService::Stub::AsyncRenameRaw(::grpc::ClientContext* context, const ::RenameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Delete(::grpc::ClientContext* context, const ::DeleteRequest& request, ::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DeleteRequest, ::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void ClientService::Stub::async::Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DeleteRequest, ::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Delete(::grpc::ClientContext* context, const ::DeleteRequest* request, ::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteResponse>* ClientService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DeleteResponse, ::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DeleteResponse>* ClientService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPermission_, context, request, response);
}

void ClientService::Stub::async::SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SetPermission(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPermission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* ClientService::Stub::PrepareAsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetOwnerResponse, ::SetOwnerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPermission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* ClientService::Stub::AsyncSetPermissionRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPermissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::SetOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOwner_, context, request, response);
}

void ClientService::Stub::async::SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOwner_, context, request, response, std::move(f));
}

void ClientService::Stub::async::SetOwner(::grpc::ClientContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* ClientService::Stub::PrepareAsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetOwnerResponse, ::SetOwnerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOwner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetOwnerResponse>* ClientService::Stub::AsyncSetOwnerRaw(::grpc::ClientContext* context, const ::SetOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::mkdir(::grpc::ClientContext* context, const ::mkdirRequest& request, ::mkdirResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mkdirRequest, ::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mkdir_, context, request, response);
}

void ClientService::Stub::async::mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mkdirRequest, ::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mkdir_, context, request, response, std::move(f));
}

void ClientService::Stub::async::mkdir(::grpc::ClientContext* context, const ::mkdirRequest* request, ::mkdirResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mkdir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mkdirResponse>* ClientService::Stub::PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mkdirResponse, ::mkdirRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mkdir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mkdirResponse>* ClientService::Stub::AsyncmkdirRaw(::grpc::ClientContext* context, const ::mkdirRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmkdirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Listing(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::GetListingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetListingrRequest, ::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Listing_, context, request, response);
}

void ClientService::Stub::async::Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetListingrRequest, ::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listing_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Listing(::grpc::ClientContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Listing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetListingResponse>* ClientService::Stub::PrepareAsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetListingResponse, ::GetListingrRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Listing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetListingResponse>* ClientService::Stub::AsyncListingRaw(::grpc::ClientContext* context, const ::GetListingrRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::RenameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RenewLeaseRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewLease_, context, request, response);
}

void ClientService::Stub::async::RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RenewLeaseRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewLease_, context, request, response, std::move(f));
}

void ClientService::Stub::async::RenewLease(::grpc::ClientContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RenameResponse>* ClientService::Stub::PrepareAsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RenameResponse, ::RenewLeaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewLease_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RenameResponse>* ClientService::Stub::AsyncRenewLeaseRaw(::grpc::ClientContext* context, const ::RenewLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewLeaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::GetBlockLocationsRequest, ::GetBlockLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetBlockLocationsRequest* req,
             ::GetBlockLocationResponse* resp) {
               return service->GetBlockLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::GetServerDefaultsRequest, ::GetServerDefaultsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetServerDefaultsRequest* req,
             ::GetServerDefaultsResponse* resp) {
               return service->GetServerDefaults(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::CreateRequest, ::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CreateRequest* req,
             ::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::AppendRequest, ::AppendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AppendRequest* req,
             ::AppendResponse* resp) {
               return service->Append(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::RenameRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RenameRequest* req,
             ::RenameResponse* resp) {
               return service->Rename(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::DeleteRequest, ::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DeleteRequest* req,
             ::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetOwnerRequest* req,
             ::SetOwnerResponse* resp) {
               return service->SetPermission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::SetOwnerRequest, ::SetOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetOwnerRequest* req,
             ::SetOwnerResponse* resp) {
               return service->SetOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::mkdirRequest, ::mkdirResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mkdirRequest* req,
             ::mkdirResponse* resp) {
               return service->mkdir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::GetListingrRequest, ::GetListingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetListingrRequest* req,
             ::GetListingResponse* resp) {
               return service->Listing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::RenewLeaseRequest, ::RenameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RenewLeaseRequest* req,
             ::RenameResponse* resp) {
               return service->RenewLease(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::GetBlockLocation(::grpc::ServerContext* context, const ::GetBlockLocationsRequest* request, ::GetBlockLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::GetServerDefaults(::grpc::ServerContext* context, const ::GetServerDefaultsRequest* request, ::GetServerDefaultsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Create(::grpc::ServerContext* context, const ::CreateRequest* request, ::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Append(::grpc::ServerContext* context, const ::AppendRequest* request, ::AppendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Rename(::grpc::ServerContext* context, const ::RenameRequest* request, ::RenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Delete(::grpc::ServerContext* context, const ::DeleteRequest* request, ::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SetPermission(::grpc::ServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::SetOwner(::grpc::ServerContext* context, const ::SetOwnerRequest* request, ::SetOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::mkdir(::grpc::ServerContext* context, const ::mkdirRequest* request, ::mkdirResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Listing(::grpc::ServerContext* context, const ::GetListingrRequest* request, ::GetListingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::RenewLease(::grpc::ServerContext* context, const ::RenewLeaseRequest* request, ::RenameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


