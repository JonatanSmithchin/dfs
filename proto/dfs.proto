syntax="proto3";

message DatanodeID{
	required string ipAddr = 1;
	required string hostName = 2;
	required string datanodeUuid = 3;

	required uint32 xferPort = 4;//datanode stream端口，用于传输数据
	required uint32 infoPort = 5;//datanode的http端口，用于展示datanode内部信息
	required uint32 ipcPort = 6;//进程间通信端口
	optional uint32 infoSecurePort = 7[default = 0];
}

message DatanodeInfo{
	required datanodeID id = 1;
	optional uint64 capacity = 2[default = 0];
	optional uint64 used = 3[default = 0];
	optional uint remaining = 4[default = 0];
	optional uint64 lastUpdate = 5[default = 0];
	optional uint32 xceiverCount = 6[default = 0];
	optional string location = 8;
	enum AdminState{
		NORMAL = 0;
		DECOMMISSION_INPROGRESS = 1;
		DECOMMISSIONED = 2;
	}
	optional AdminState adminState = 9[defalut = NORMAL];

}

message Permission{
	required uint32 psermission = 1;
}

message FileStatus{
	enum FileType{
		IS_DIR = 1;
		IS_FILE = 2;
		IS_SYMLINK = 3;
	}
	required FileType fileType = 1;
	required string path = 2;
	required uint64 = 3;
	required Permission permission = 4;
	required string owner = 5;
	required string group = 6;
	required uint64 modification_time = 7;
	required uint64 access_time = 8;
}

enum ChecksumType{
	CHECKSUM_NULL = 0;
	CHECKSUM_CRC32 = 1;//循环冗余校验
	CHECKSUM_CRC32C = 2;
}

message ServerDefaults{
	required uint64 blockSize = 1;
	required uint32 bytesPerChecksum = 2;//每多少字节需要添加校验和
	required uint32 writePacketSize = 3;//每次发送数据包大小
	required uint32 replication = 4;
	required uint32 fileBufferSize = 5;
	optional ChecksumType checksumType = 6[default = CHECKSUM_CRC32];
}

message DirestoryListing{
	repeated FileStatus partialListing = 1;
	required uint32 remainingEntries = 2;//剩余未列出的目录
}

message Block{
	required uint64 blockId = 1;
	required uint64 generationStamp = 2;//时间戳
	optional uint64 size = 3[default = 0];//大小
}

message BlockWithLocation{
	required Block block = 1;
	repeated string datanodeUuids = 2;
}

message LocatedBlock{
	required Block block = 1;
	required uint64 offset = 2;
	repeated DatanodeInfo locs = 3;
	required bool corrupt = 4;//如果存在冲突的数据块，则为true
}

message LocatedBlocks{
	required uint64 fileLength = 1;
	repeated LocatedBlock blocks = 2;
	optional LocatedBlock last = 3;
	required bool isLastBlockcomplete = 5;
}

message BlocksWithLocation{
	repeated Block blocks = 1;
}

//用于访问Block的token
message BlockKey{
	required uint32 keyId = 1;
	required uint64 expiryDate = 2;
	optional bytes keyBytes = 3; //token中携带的密钥
}

